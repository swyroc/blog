[{"content":"\n\n[TOC]\n\n![封面图](http://ww1.sinaimg.cn/large/006jIRTegy1fyqcsjhs54j31p40ye7hh.jpg)\n\n# ajax传参形式\n\n## 介绍\n\n$.ajax()是jQuery发送异步请求的方式，简化了原生js的操作过程。\n\n## 选项详解\n\n\u003e jQuery ( jQuery v1.11.2)\n\n```js\n$.ajax({    \n    url: \"http://www.hzhuti.com\",    //请求的url地址   \n    dataType: \"json\",   //返回格式为json    \n    async: true, //请求是否异步，默认为异步，这也是ajax重要特性    \n    data: { \"id\": \"value\" },    //参数值    \n    type: \"GET\",   //请求方式    \n    beforeSend: function(request) {        \n      //请求前的处理\n      request.setRequestHeader(\"Content-type\",\"application/json\");\n      request.setRequestHeader(\"Source\",\"101\");\n      request.setRequestHeader(\"Token\",\"aaw--wssw-ss...\");\n    },   \n    success: function(data) {        \n    //请求成功时处理    \n    },   \n    complete: function() {        \n      //请求完成的处理    \n    },    \n    error: function() {        \n      //请求出错处理    \n    }\n});\n```\n\n```js\n格式说明：\n  1.参数名；\n  2.参数类型；\n  3.参数说明，默认值，可选值；\n\nurl\nString\n(默认: 当前页地址) 发送请求的地址。\n\ntype\nString\n(默认: \"GET\") 请求方式 (\"POST\" 或 \"GET\")， 默认为 \"GET\"。\n注意：其它 HTTP 请求方法，如 PUT 和 DELETE 也可以使用，但仅部分浏览器支持。\n\ntimeout\nNumber\n设置请求超时时间（毫秒）。此设置将覆盖全局设置。\n\nasync\nBoolean\n(默认: true) 默认设置下，所有请求均为异步请求。如果需要发送同步请求，请将此选项设置为 false。注意，同步请求将锁住浏览器，用户其它操作必须等待请求完成才可以执行。\n\nbeforeSend\nFunction\n发送请求前可修改 XMLHttpRequest 对象的函数，如添加自定义 HTTP 头。XMLHttpRequest 对象是唯一的参数。\nfunction (XMLHttpRequest) { \n  this; \n}\n\ncache\nBoolean\n(默认: true) jQuery 1.2 新功能，设置为 false 将不会从浏览器缓存中加载请求信息。\n\ncomplete\nFunction\n请求完成后回调函数 (请求成功或失败时均调用)。参数： XMLHttpRequest 对象，成功信息字符串。\nfunction (XMLHttpRequest, textStatus) { \n}\n\ncontentType\nString\n(默认: \"application/x-www-form-urlencoded\") 发送信息至服务器时内容编码类型。默认值适合大多数应用场合。\n\ndata\nObject,String\n发送到服务器的数据。将自动转换为请求字符串格式。GET 请求中将附加在 URL 后。\n查看 processData 选项说明以禁止此自动转换。必须为 Key/Value 格式。\n如果为数组，jQuery 将自动为不同值对应同一个名称。\n如 {foo:[\"bar1\", \"bar2\"]} 转换为 '\u0026foo=bar1\u0026foo=bar2'。\n\ndataType\nString\n预期服务器返回的数据类型。如果不指定，jQuery 将自动根据 HTTP 包 MIME 信息返回 responseXML 或 responseText，并作为回调函数参数传递，可用值:\n\"xml\": 返回 XML 文档，可用 jQuery 处理。\n\"html\": 返回纯文本 HTML 信息；包含 script 元素。\n\"script\": 返回纯文本 JavaScript 代码。不会自动缓存结果。\n\"json\": 返回 JSON 数据 。\n\"jsonp\": JSONP 格式。使用 JSONP 形式调用函数时，\n如 \"myurl?callback=?\" jQuery 将自动替换 ? 为正确的函数名，以执行回调函数。\n \nerror\nFunction\n(默认: 自动判断 (xml 或 html)) 请求失败时将调用此方法。\n这个方法有三个参数：XMLHttpRequest 对象，错误信息，（可能）捕获的错误对象。\nfunction (XMLHttpRequest, textStatus, errorThrown) {\n   // 通常情况下textStatus和errorThown只有其中一个有值  this; \n}\n\nglobal\nBoolean\n(默认: true) 是否触发全局 AJAX 事件。\n设置为 false 将不会触发全局 AJAX 事件，如 ajaxStart 或 ajaxStop 。\n可用于控制不同的Ajax事件\n\nifModified\nBoolean\n(默认: false) 仅在服务器数据改变时获取新数据。使用 HTTP 包 Last-Modified 头信息判断。\n\nprocessData\nBoolean\n(默认: true) 默认情况下，发送的数据将被转换为对象(技术上讲并非字符串) 以配合默认内容类型 \"application/x-www-form-urlencoded\"。\n如果要发送 DOM 树信息或其它不希望转换的信息，请设置为 false。\n\nsuccess\nFunction\n请求成功后回调函数。这个方法有两个参数：服务器返回数据，返回状态function (data, textStatus) { \n  // data could be xmlDoc, jsonObj, html, text, etc... \n}\n\n```\n\n## 传参几种形式\n\n### URL拼接传参\n\n```js\nlet name =\"suveng\";\nlet user=\"ss\"\n$.ajax({    \n    url: \"/login/authenticate?name=\"+name+\"\u0026user=\"+user,    //请求的url地址   \n    dataType: \"json\",   //返回格式为json    \n    async: true, //请求是否异步，默认为异步，这也是ajax重要特性    \n    data: {},    //参数值    \n    type: \"GET\",   //请求方式    \n    beforeSend: function(request) {        \n      //请求前的处理...\n    },   \n    success: function(data) {        \n    //请求成功时处理...\n    },   \n    complete: function() {        \n      //请求完成的处理...   \n    },    \n    error: function() {        \n      //请求出错处理...\n    }\n});\n```\n\n### JSON传参\n\n```js \nlet name =\"suveng\";\nlet user=\"ss\";\nvar data = {\"name\":name,\"user\":user}\n\n$.ajax({    \n    url: \"/login/authenticate\",   //请求的url地址   \n    dataType: \"json\",   //返回格式为json    \n    async: true, //请求是否异步，默认为异步，这也是ajax重要特性    \n    data: data,    //参数值    \n    type: \"GET\",   //请求方式    \n    beforeSend: function(request) {        \n      //请求前的处理...\n    },   \n    success: function(data) {        \n    //请求成功时处理...\n    },   \n    complete: function() {        \n      //请求完成的处理...   \n    },    \n    error: function() {        \n      //请求出错处理...\n    }\n});\n```\n\n\n\n### 表单序列化传参\n\n```js\nvar params=$('#login').serialize(); //把id为login的form表单里的参数自动封装为参数传递\n\n$.ajax({    \n    url: \"/login/authenticate\",    //请求的url地址   \n    dataType: \"json\",   //返回格式为json    \n    async: true, //请求是否异步，默认为异步，这也是ajax重要特性    \n    data: params,   //参数值    \n    type: \"GET\",   //请求方式    \n    beforeSend: function(request) {        \n      //请求前的处理...\n    },   \n    success: function(data) {        \n    //请求成功时处理...\n    },   \n    complete: function() {        \n      //请求完成的处理...   \n    },    \n    error: function() {        \n      //请求出错处理...\n    }\n});\n```\n\n### 拼接data\n\n```js\nlet name =\"suveng\";\nlet user=\"ss\"\n\n$.ajax({    \n    url: \"/login/authenticate\",    //请求的url地址   \n    dataType: \"json\",   //返回格式为json    \n    async: true, //请求是否异步，默认为异步，这也是ajax重要特性    \n    data: 'name='+name+'\u0026user='+user,    //参数值    \n    type: \"GET\",   //请求方式    \n    beforeSend: function(request) {        \n      //请求前的处理...\n    },   \n    success: function(data) {        \n    //请求成功时处理...\n    },   \n    complete: function() {        \n      //请求完成的处理...   \n    },    \n    error: function() {        \n      //请求出错处理...\n    }\n});\n```\n\n\u003e 以下传参 需要引入：`\u003cscript type=\"text/javascript\" src=\"serializeJSON.js\"\u003e\u003c/script\u003e`\n\n### 表单序列化为JSON数据传参\n\n```js\nvar params=$('#login').serializeJSON();\n\n$.ajax({    \n    url: \"/login/authenticate\",    //请求的url地址   \n    dataType: \"json\",   //返回格式为json    \n    async: true, //请求是否异步，默认为异步，这也是ajax重要特性    \n    data: params,    //参数值    \n    type: \"GET\",   //请求方式    \n    beforeSend: function(request) {        \n      //请求前的处理...\n    },   \n    success: function(data) {        \n    //请求成功时处理...\n    },   \n    complete: function() {        \n      //请求完成的处理...   \n    },    \n    error: function() {        \n      //请求出错处理...\n    }\n});\n```\n\n### 表单序列化为JSON数据+额外参数\n\n```js\nvar params=$('#login').serializeJSON();\n\nparams.zidingyi=\"自定义属性\"\n\n$.ajax({    \n    url: \"/login/authenticate\",    //请求的url地址   \n    dataType: \"json\",   //返回格式为json    \n    async: true, //请求是否异步，默认为异步，这也是ajax重要特性    \n    data: params,    //参数值    \n    type: \"GET\",   //请求方式    \n    beforeSend: function(request) {        \n      //请求前的处理...\n    },   \n    success: function(data) {        \n    //请求成功时处理...\n    },   \n    complete: function() {        \n      //请求完成的处理...   \n    },    \n    error: function() {        \n      //请求出错处理...\n    }\n});\n```\n\n\n\n## 参考文章\n\n[Ajax请求（$.ajax()为例）中data属性传参数的形式](https://blog.csdn.net/qq_29569183/article/details/79194292)\n\n[jQuery ajax——参数详解](https://www.jianshu.com/p/bb686b367800)\n\n","cover":"http://ww1.sinaimg.cn/large/006jIRTegy1fyqcsjhs54j31p40ye7hh.jpg","link":"20181231/$.ajax()传参形式.html","preview":"\u003cp\u003e$.ajax()是jQuery发送异步请求的方式，简化了原生js的操作过程。介绍几种参数形式\u003c/p\u003e\n","title":"ajax传参形式"}]